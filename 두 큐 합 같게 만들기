import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Solution {	
	public static int solution(int[] queue1, int[] queue2) {
		int answer = 0;
		int length = queue1.length;
		long queue1_Sum = 0;  // queue1의 합계만을 사용할 것
		long total_Sum = 0;
		long target_Sum = 0;
		
		Queue<Integer> q1 = new LinkedList<>();
		Queue<Integer> q2 = new LinkedList<>();
        
		queue1_Sum = Arrays.stream(queue1).sum();  // 6        
		total_Sum = queue1_Sum + Arrays.stream(queue2).sum();  // 20

		if (total_Sum % 2 == 1) return -1;  // 똑같이 나눌 수 없다면 -1 리턴
        
		target_Sum = total_Sum / 2;  // 10 // 하나의 큐만 절반 값을 맞춘다면 okay, 절반 값 이용
        
		for (int i = 0; i < length; i++) {
			q1.offer(queue1[i]);  // 1, 2, 1, 2
			q2.offer(queue2[i]);  // 1, 10, 1, 2
		}
        
		int temp_Num = 0;
        
		while (queue1_Sum != target_Sum) {        	
			if (queue1_Sum < target_Sum) {
				temp_Num = q2.poll();
				q1.offer(temp_Num);
				queue1_Sum += temp_Num;
			} else {
				temp_Num = q1.poll();
				q2.offer(temp_Num);
				queue1_Sum -= temp_Num;
			}        	
			answer++;
        	
			// queue1, queue2의 모든 원소가 자리바꿈하여 다시 원래의 위치로 오기 위한 횟수 (queue1.length + queue2.length) * 2 = 16
			// 즉 16이 된다는 것은 다시 처음의 경우와 같아졌음을 의미하고, 더이상 반복할 필요가 없음
			if (answer > length * 4 - 1) return -1;
		}		
		return answer;
	}

	public static void main(String[] args) {
		int[] queue1 = {1, 2, 1, 2};
		int[] queue2 = {1, 10, 1, 2};
		
		System.out.println(solution(queue1, queue2));  // 7
	}
}

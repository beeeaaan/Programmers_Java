import java.util.HashSet;
import java.util.Iterator;

class Solution {
    HashSet<Integer> numbersSet = new HashSet<>();
    public boolean isPrime(int num) {
        // 0과 1은 소수가 아님
        if (num == 0 || num == 1)
            return false;

        // 에라토스테네스의 체의 limit 숫자 계산
        int lim = (int)Math.sqrt(num);

        // 에라토스테네스의 체에 따라 lim까지 배수 여부 확인
        for (int i = 2; i <= lim; i++)
            if (num % i == 0)
                return false;
        return true;
    }

    public void recursive(String comb, String others) {
        // 현재 조합을 set에 추가
        if (!comb.equals(""))
            numbersSet.add(Integer.valueOf(comb));

        // 남은 숫자 중 한 개를 더해 새로운 조합 만들기
        for (int i = 0; i < others.length(); i++)
            recursive(comb + others.charAt(i), others.substring(0, i) + others.substring(i + 1));
    }

    public int solution(String numbers) {
        // 모든 조합의 숫자 만들기
        recursive("", numbers);

        // 2. 소수의 개수만 센다.
        int count = 0;
        Iterator<Integer> it = numbersSet.iterator();
        while (it.hasNext()) {
            int number = it.next();
            if (isPrime(number))
                count++;
        }
        // 수의 개수 반환
        return count;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        System.out.println(sol.solution("117"));
    }
}

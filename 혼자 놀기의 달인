import java.util.*;

class Solution {
    static PriorityQueue<Integer> queue;
    public int solution(int[] cards) {
        int answer = 0;
        int x = cards.length;  // cards 크기가 선택한 숫자
        boolean[] visited = new boolean[x];
        queue = new PriorityQueue<>(Collections.reverseOrder());  // 상자 그룹 개수
        
        for(int i = 0; i < x; i++) {
            // 열지 않은 상자일 경우
            if(!visited[i]) {
                dfs(cards, i, visited, 0);
            }
        }
        // queue 크기가 1일 경우 1번 상자 그룹만 존재
        if(queue.size() != 1) {
            answer = queue.poll() * queue.poll();    
        }
        return answer;
    }
    static void dfs(int[] cards, int num, boolean[] visited, int cnt) {
        // 열었던 상자일 경우
        if(visited[num]) {
            queue.add(cnt);  // 상자의 개수 queue에 저장
            return;
        }
        visited[num] = true;
        dfs(cards, cards[num] - 1, visited, cnt + 1);
    }
}

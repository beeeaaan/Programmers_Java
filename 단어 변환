import java.util.*;

class Solution {
    public int solution(String begin, String target, String[] words) {
        int answer = 0;        
        Queue<String> wordQue = new LinkedList<>();  // 변환 가능한 단어들 저장할 queue
        Set<String> wordSet = new HashSet<>(Arrays.asList(words));  // 단어들의 집합 set
        
        // 변환할 수 없는 경우
        if(!wordSet.contains(target)) {
            return 0;
        }
        
        wordQue.offer(begin);  // queue에 begin 단어 추가
        wordSet.remove(begin);  // set의 begin 단어 제거
        
        while (!wordQue.isEmpty()) {           
            for (int i = 0; i < wordQue.size(); i++) {
                // queue에서 단어를 하나씩 꺼내어 current (현재단어)에 저장
                String current = wordQue.poll();  // queue에서 단어 하나씩 꺼내 현재 단어에 저장
                
                // 타겟 단어에 도달한 경우
                if (current.equals(target)) {
                    return answer;
                }
                
                // to.Array 사용(HashSet 타입은 for문 사용 불가)
                for (String word : wordSet.toArray(new String[wordSet.size()])) {
                    // 변환 가능한 경우
                    if(canConvert(current, word)) {
                        wordQue.offer(word);
                        wordSet.remove(word);
                    }
                }
            }
            
            answer++;
        }
        
        return 0;
    }
    
    private boolean canConvert(String wordX, String wordY) {
        int diffCount = 0;
        
        for (int i = 0; i < wordX.length(); i++) {
            if (wordX.charAt(i) != wordY.charAt(i)) {
                diffCount++;
            }
        }
        
        return diffCount == 1;
    }
}

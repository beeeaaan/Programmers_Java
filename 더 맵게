import java.util.*;

class Solution {
    public int solution(int[] scoville, int K) {
        int answer = 0;
        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();
        
        // heap에서 제일 작은 값(minHeap.peek())이 K보다 작을 경우 반복
        for (int i = 0; i < scoville.length; i++) {
            heap.add(scoville[i]);
        } while(heap.peek() < K) {
            
            int min1 = heap.poll();
            int min2 = heap.poll();
            
            // 작은 값 두 개를 꺼내 스코빌 지수를 계산한 후 힙에 넣고 answer값을 1 증가시키기
            int scov = min1 + min2 * 2;
            heap.add(scov);
            answer++;
            
            // 제일 작은 값이 K 이상이면
            if(heap.peek() >= K) break;
            // 마지막수가 K보다 작고 heap의 크기가 1일 경우
            if(heap.size() == 1 && heap.peek() < K) {answer =-1; break;}
        }
        return answer;
    }
}

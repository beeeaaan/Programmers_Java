import java.util.*;

public class Solution {
    public int solution(int[] order) {
        int answer = 0;        
        int orderPointer = 0;  // order 배열의 포인터        
        int currentBox = 1;  // 컨테이너 벨트에서 현재 확인중인 박스 번호        
        Stack<Integer> assistanceBelt = new Stack<>();  // 보조 컨테이너 벨트
        
        while (orderPointer < order.length) {
            // 트럭에 실릴 박스의 번호가 현재 컨테이너 벨트의 박스 번호보다 클 경우
            if (order[orderPointer] > currentBox) {
                // 보조 벨트에 현재 박스 보관
                assistanceBelt.push(currentBox);
                currentBox++;
            }            
            // 트럭에 실릴 박스의 번호가 현재 컨테이너 벨트의 박스 번호와 같을 경우
            else if (order[orderPointer] == currentBox) {
                // 트럭에 싣기
                answer++;
                orderPointer++;
                currentBox++;
            }
            // 트럭에 실릴 박스의 번호가 현재 컨테이너 벨트의 박스 번호보다 작을 경우
            else {
                // 보조 벨트 확인
                while (!assistanceBelt.isEmpty() && order[orderPointer] == assistanceBelt.peek()) {
                    assistanceBelt.pop();
                    answer++;
                    orderPointer++;
                }
                // 트럭에 모두 실었으면 종료.
                // 또는 여전히 트럭에 실을 박스 번호가 현재 컨테이너 벨트의 박스 번호보다 작으면 종료
                // 보조 벨트에도 원하는 박스가 없고, 컨테이너 벨트는 계속해서 더 큰 번호의 박스가 등장
                // 따라서 더 이상 박스를 싣지 못 함  
                if (orderPointer >= order.length || order[orderPointer] < currentBox) break;
            }
        }
        return answer;
    }
}

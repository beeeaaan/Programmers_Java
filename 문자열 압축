class Solution {
    public int solution(String s) {
        int answer = 0;            
            int max = s.length();  // 반환되는 문자열 길이

            // 최대 문자열의 절반을 기준으로 문자열 압축
            for (int i = 1; i <= (s.length() / 2); i++) {
                int left = 0;  // 기준점 시작 위치
                int right = left + i;  // 비교 시작 위치
                int count = 1;  // 문자열 중복 횟수
                String s1 = s.substring(left, left + i);  // 중복 찾는 문자열 길이
                StringBuilder sb = new StringBuilder("");  // 문자열 압축 후 저장되는 문자열

                while (right + i <= s.length()) {  // 비교하는 문자의 위치가 전체 길이를 넘지 않아야 함
                    String s2 = s.substring(right, right + i);  // 중복 찾는 비교 문자열
                    
                    if (s1.equals(s2)) {  // 중복일 경우(압축 가능할 때)
                        count++;
                    } else { // 중복이 아닐 경우
                        if (count > 1) sb.append(count);  //직전에 중복된 문자가 있을 경우
                        sb.append(s1);
                        s1 = s2;  // 비교 문자 변경
                        count = 1;  // 문자 변경 되었으므로 중복 횟수도 변경
                    }
                    right = right + i;  // 다음 비교 위치 이동
                }
                //반복문 종료 후 마지막으로 남는 문자열 추가
                if (count > 1) sb.append(count);
                String tmp = s.substring(right - i, s.length());
                sb.append(tmp);

                //최저 길이 저장
                if (sb.length() <= max) max = sb.length();
            }
            answer = max;

            return answer;
    }
}

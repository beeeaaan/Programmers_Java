class Solution {   
    // u 변환하는 메소드
    public static String reverse(String str){
        // 변환한 문자열 저장할 StringBuilder 객체
        StringBuilder s = new StringBuilder();
         
        // 마지막 문자 제외하고 반복
        for(int i = 1; i < str.length() - 1; i++){
            // (를 )로 변경
            if(str.charAt(i) == '(') s.append(")");
            // )를 (로 변경
            else s.append("(");
        }
        //  새로운 문자열 반환
        return s.toString();
    }
    
    // 올바른 괄호 문자열 판단 메소드
    public static boolean check(String str){        
        int open = 0;  // ( 의 개수 세는 변수          
        // 첫 문자가 )인 경우 올바른 괄호 문자열인 경우가 아니므로 false
        if(str.charAt(0) ==')') return false;
        
        // 문자열 탐색
        for(int i = 0; i < str.length(); i++){
            // (의 개수 카운팅
            if(str.charAt(i) == '(') open++;
            else {
                // )를 만나면 open 감소
                open--;
                // 카운팅 과정에서 open이 음수가 되면 (의 개수보다 )의 개수가 많아지는 순간이므로 올바른 괄호 문자열이 아니므로 false
                if(open<0) return false;
            }
        }
        // 위 조건 모두 통과하면 올바른 괄호 문자열
        return true;
    }
    
    // 균형잡힌 괄호 문자열 -> 올바른 괄호 문자열 변환 메소드
    public static String split(String w){
        
        // 입력된 문자열 w를 u와 v로 나누어 저장하는 StringBuilder클래스 객체
        StringBuilder u = new StringBuilder();
        StringBuilder v = new StringBuilder();
        
        // 빈 문자열인 경우, 빈 문자열을 반환
        if(w.length() == 0) return "";
        
        // (의 개수를 저장하는 변수
        int open = 0;
        
        for(int i = 0; i < w.length(); i++){ 
            // 한 문자가 (인 경우 open 증가
            if(w.charAt(i) == '(') open++;    
            // )인 경우 open 감소
            else open--;
            
            // 처음 open이 0이 된 경우가 가장 작은 단위의 "균형잡힌 괄호 문자열"
            if(open == 0){
                // 해당 인덱스를 기점으로 u와 v로 분리
                u.append(w.substring(0, i + 1));
                v.append(w.substring(i + 1, w.length()));
                
                // u가 "올바른 괄호 문자열"일 경우
                if(check(u.toString())){
                    // v에 대해 재귀호출 후, u에 이어 붙이기
                    // 이 과정 후 break에 걸려 u를 반환하므로 변환 과정 성립
                    u.append(split(v.toString())); 
                // u가 "올바른 괄호 문자열"이 아닐 경우    
                } else {
                    // 새로운 StringBuilder 객체 생성
                    StringBuilder str = new StringBuilder();
                    // ( 붙이기
                    str.append("(");
                    // v에 대해 재귀호출 후 붙이기
                    str.append(split(v.toString()));
                    // ) 붙이기
                    str.append(")");
                    // u 조작해 붙이기
                    str.append(reverse(u.toString()));
                    // 새로운 문자열 반환
                    return str.toString();
                }
                break;             
            }
        }
        // u가 올바른 문자인 경우에만 반환되는 u
        return u.toString();        
    }
    
    public String solution(String p) {
        String answer;
        
        // 올바른 괄호 문자열일 경우 바로 문자열을 반환
        if(check(p))
            return p;
        // 나머지 균현잡힌 괄호 문자열 => 올바른 괄호 문자열 변환 메소드 호출 및 answer 저장      
        answer = split(p);
    
        return answer;
    }
}

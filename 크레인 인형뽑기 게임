import java.util.Stack;

class Solution {
    public int solution(int[][] board, int[] moves) {       
        int answer = 0;  // 연속된 인형들이 제거된 횟수     
        Stack<Integer> stack = new Stack<>();   // 인형을 담을 stack 바구니                   
        for(int i = 0; i < moves.length; i++) {  // moves의 크기는 크레인의 총 이동횟수
            // j 인덱스를 이용해 보드의 행을 탐색. 열은 moves의 원소를 이용해 탐색
            for(int j = 0; j < board.length; j++) {                
                if(board[j][moves[i]-1] != 0 ) {  // j행의 moves의 크레인위치 열에 해당하는 값에 인형이 존재한다면                                   
                    if(!stack.empty() && stack.peek() == board[j][moves[i]-1]) {  // stack이 비어있지 않고, 현재 스택의 최상단에 있는 인형과 크레인으로 뽑은 인형이 같다면                        
                        answer++;  // 인형들을 제거하는 횟수 증가               
                        stack.pop();  // 바구니에 있는 인형을 제거 
                        board[j][moves[i] - 1] = 0;  // 크레인으로 뽑은 인형을 0으로 만들어 제거
                        break;     
                    } else {  // 그 외의 경우는 인형을 바구니에 담은 후 0으로 제거
                        stack.push(board[j][moves[i] - 1]);               
                        board[j][moves[i] - 1] = 0;
                        break;
                    }
                }                        
            }
        }        
        return answer * 2;  // 없앤 인형의 수 = 인형을 없앤 수 * 2.
    }
}

import java.util.Comparator;
import java.util.PriorityQueue;

class Solution {
    public int[] solution(String[] operations) {
        PriorityQueue<Integer> max_Queue = new PriorityQueue<>(Comparator.reverseOrder());  // 내림차순 정렬
        PriorityQueue<Integer> min_Queue = new PriorityQueue<>();  // 오름차순정렬
        
        for(int i = 0; i < operations.length; i++) {
            String[] s = operations[i].split(" ");
            
           // 큐가 비어있을 경우
            if(s[0].equals("D") && max_Queue.isEmpty()) {
                continue;  // 패스
            }
            // 큐에 삽입
            if(s[0].equals("I")) {
                max_Queue.offer(Integer.parseInt(s[1]));
                min_Queue.offer(Integer.parseInt(s[1]));
            }
            else if(s[0].equals("D") && s[1].equals("1")) {
                int max = max_Queue.poll();
                min_Queue.remove(max);
            } else {
                int min = min_Queue.poll();
                max_Queue.remove(min);
            }
        }

        if(max_Queue.isEmpty()) return new int[] {0,0};
        else return new int[] {max_Queue.poll(), min_Queue.poll()};  // 최대값, 최소값
    }
}
